---
description: Generate a professional README.md by analyzing existing codebase
globs:
alwaysApply: false
---
# Rule: Generate README from Codebase Analysis

## Goal

To guide an AI assistant in creating a comprehensive, accurate README.md file by analyzing an existing codebase. The README should reflect the actual project structure, dependencies, and functionality found in the code.

## Process

1. **Receive Codebase Reference:** The user provides access to relevant files and directories using @ tags (e.g., @package.json @src/ @components/).

2. **Analyze Codebase:** Systematically examine the provided files to understand:
   - Project structure and architecture
   - Dependencies and technology stack
   - Main entry points and key components
   - Configuration files and build processes
   - Existing documentation or comments
   - Testing setup and patterns

3. **Ask Clarifying Questions:** Based on the analysis, ask specific questions to fill gaps:
   - **Project Purpose:** "Based on the code, this appears to be a [description]. Is this correct? What specific problem does it solve?"
   - **Target Audience:** "Who is the intended user - developers, end-users, or both?"
   - **Key Features:** "I can see functionality for [list discovered features]. Are there other important features to highlight?"
   - **Environment:** "What are the typical deployment environments or platforms?"
   - **Project Status:** "What's the current development status and stability level?"
   - **Missing Context:** "Are there any important aspects not evident from the code that should be documented?"

4. **Generate README:** Create a comprehensive README based on code analysis and user responses.

5. **Save File:** Save as `README.md` in the project root directory.

## Codebase Analysis Strategy

### Phase 1: Project Structure Analysis
- Examine root directory files (package.json, requirements.txt, Cargo.toml, etc.)
- Identify main entry points (main.js, index.html, app.py, etc.)
- Map directory structure and organization patterns
- Identify configuration files and environment settings

### Phase 2: Technology Stack Detection
- Parse dependency files to identify frameworks and libraries
- Analyze import/require statements to understand usage patterns
- Identify build tools, bundlers, and development tools
- Detect testing frameworks and CI/CD configurations

### Phase 3: Functionality Discovery
- Examine main application files to understand core features
- Identify API endpoints, routes, or main functions
- Look for database schemas, models, or data structures
- Find example usage in tests or sample files

### Phase 4: Documentation Extraction
- Extract existing comments, docstrings, or inline documentation
- Identify any existing README or documentation files
- Look for example usage in test files
- Find configuration examples or sample files

## README Structure (Code-Informed)

Generate a README with these sections, populated with discovered information:

### 1. Header Section
- Project title (from package.json, setup.py, etc.)
- Description (from package description or code analysis)
- Badges relevant to detected technologies
- Links to discovered demo files or documentation

### 2. About / Overview
- Purpose inferred from code structure and functionality
- Architecture overview based on discovered patterns
- Key technologies and frameworks used

### 3. Features
- Functionality discovered through code analysis
- API endpoints or main functions identified
- Key capabilities with code examples where appropriate

### 4. Installation & Setup
- Dependencies from package files
- Environment requirements from configuration files
- Step-by-step setup based on detected build processes
- Environment variables from config files

### 5. Usage
- Examples based on discovered entry points
- API usage from route analysis
- Configuration options from config files
- Code snippets from actual project files

### 6. Project Structure
- Directory layout explanation
- Key files and their purposes
- Architecture patterns used

### 7. Development
- Build processes from scripts/Makefile
- Testing instructions from test configurations
- Development setup from dev dependencies

### 8. API Documentation (if applicable)
- Endpoints discovered from routing files
- Request/response examples from code
- Authentication patterns found

### 9. Configuration
- Environment variables from config files
- Configuration options from settings files
- Deployment configurations discovered

### 10. Contributing
- Development setup from build configurations
- Testing procedures from test files
- Code style from linting configurations

### 11. Technology Stack
- Complete list of detected technologies
- Versions from dependency files
- Brief explanation of architectural choices

### 12. License & Contact
- License from LICENSE file or package metadata
- Author information from package files
- Repository links from git configuration

## Analysis Guidelines

### File Priority (examine in order)
1. **Configuration Files:** package.json, requirements.txt, Cargo.toml, setup.py
2. **Entry Points:** main.js, index.js, app.py, main.py, index.html
3. **Core Application:** src/, lib/, app/, components/
4. **Documentation:** existing README, docs/, comments in code
5. **Tests:** test/, spec/, __tests__/
6. **Configuration:** config/, .env files, settings files

### Information Extraction Patterns
- **Dependencies:** Extract from package managers and import statements
- **Scripts:** Analyze npm scripts, Makefile targets, or similar
- **Environment:** Look for .env files, config files, or environment checks
- **Features:** Identify from route definitions, component structure, or main functions
- **Examples:** Extract from test files, example directories, or documentation

## Quality Assurance

Ensure the generated README:
- [ ] Accurately reflects the actual codebase
- [ ] Includes working installation instructions based on real dependencies
- [ ] Provides examples that match the actual API or usage patterns
- [ ] Documents configuration options that actually exist
- [ ] Reflects the true project structure and architecture
- [ ] Includes version information from package files
- [ ] Mentions all significant dependencies and their purposes

## Final Instructions

1. Thoroughly analyze all provided files before asking questions
2. Base all documentation on actual code evidence
3. Ask clarifying questions for context not evident in code
4. Generate a README that accurately represents the existing project
5. Validate that all instructions and examples are based on real code
6. Save as `README.md` and offer to make adjustments based on feedback
